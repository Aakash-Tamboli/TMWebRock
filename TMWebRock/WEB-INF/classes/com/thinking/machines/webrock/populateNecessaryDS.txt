private List<Service> populateNecessaryDS(List<String> list,ServletConfig servletConfig)
{
Class c;
Path path;
OnStartup onStartup;
Forward forward;
String str=null;
String str2=null;
String name=null;
boolean isGetAllowed=false;
boolean isPostAllowed=false;
String forwardTo=null;
int priority;
Service service=null;
List<AutoWiredWrapper> autoWiredList=null;
Field []props=null;
Field property=null;
Class type=null;
Parameter []parameter=null;
List<RequestedParameter> requestedParameterList=null;


boolean injectApplicationDirectory=false;
boolean injectApplicationScope=false;
boolean injectSessionScope=false;
boolean injectRequestScope=false;


int objectCount=1; // DEBUGGING PUPOSE

List<Service> startupList=new ArrayList<>();
WebRockModel model=new WebRockModel();

try
{

for(String classes: list)
{
c=Class.forName(classes);

// analyzing property of framework user starts

props=c.getDeclaredFields();
autoWiredList=null;

if(props!=null && props.length!=0)
{
autoWiredList=new ArrayList<>();
for(int i=0;i<props.length;i++)
{
if(props[i].isAnnotationPresent(AutoWired.class))
{
property=props[i];
name=props[i].getAnnotation(AutoWired.class).name();
type=props[i].getType();
autoWiredList.add(new AutoWiredWrapper(property,name,type));
}
} // loop ends
} // scanning props of Class

// analyzing property of framework user ends

if(c.isAnnotationPresent(Path.class))
{
path=(Path)c.getAnnotation(Path.class);
str=path.value();
if(str.length()==0) continue;
if(str.charAt(0)!='/') str="/"+str; // for less error prone code
if(c.isAnnotationPresent(InjectApplicationDirectory.class)) injectApplicationDirectory=true;
if(c.isAnnotationPresent(InjectApplicationScope.class)) injectApplicationScope=true;
if(c.isAnnotationPresent(InjectSessionScope.class)) injectSessionScope=true;
if(c.isAnnotationPresent(InjectRequestScope.class)) injectRequestScope=true;

if(c.isAnnotationPresent(GET.class))
{
isGetAllowed=true;
isPostAllowed=false;
}
else if(c.isAnnotationPresent(POST.class))
{
isPostAllowed=true;
isGetAllowed=false;
}


// method loop starts
for(Method m: c.getDeclaredMethods())
{
// Analysis of Parameter in Method starts
parameter=m.getParameters();








// Analysis of Parmeter in Method Starts


requestedParameterList=null;
if(parameter!=null && parameter.length!=0)
{
requestedParameterList=new ArrayList<>();
for(int i=0;i<parameter.length;i++)
{
if(parameter[i].isAnnotationPresent(RequestParameter.class))
{
name=parameter[i].getAnnotation(RequestParameter.class).value();
type=parameter[i].getType();
requestedParameterList.add(new RequestedParameter(type,name));
} // if block ends
} // loop ends
} // if ends
// Analysis of Parmeter in Method ends
















































if(m.isAnnotationPresent(OnStartup.class)) priority=m.getAnnotation(OnStartup.class).Priority();
else priority=-1;
if(m.isAnnotationPresent(Path.class))
{
path=m.getAnnotation(Path.class);
str2=path.value();
if(str2.length()==0) continue;
if(c.isAnnotationPresent(GET.class)==false && c.isAnnotationPresent(POST.class)==false) // it means class level does not have niether @GET nor @POST so I have to check on method level
{
if(m.isAnnotationPresent(GET.class))
{
isGetAllowed=true;
isPostAllowed=false;
}
else if(m.isAnnotationPresent(POST.class))
{
isPostAllowed=true;
isGetAllowed=false;
}
else
{
isGetAllowed=true;
isPostAllowed=true;
}
}
if(m.isAnnotationPresent(Forward.class))
{
forward=m.getAnnotation(Forward.class);
forwardTo=forward.value();
if(forwardTo.length()==0) forwardTo=null;
}



service=new Service(c,str+str2,forwardTo,m,isGetAllowed,isPostAllowed,false,priority,injectApplicationDirectory,injectApplicationScope,injectSessionScope,injectRequestScope,autoWiredList,requestedParameterList);
model.dataStructure.put(str+str2,service);
forwardTo=null; // for next cycle
}
else
{
if(priority!=-1)
{
service=new Service(c,"ONLY_FOR_STARTUP","ONLY_FOR_STARTUP",m,false,false,true,priority,injectApplicationDirectory,injectApplicationScope,injectSessionScope,injectRequestScope,autoWiredList,requestedParameterList);
startupList.add(service); // think about min-heap Aakash If Sir give you instruction you can implement it
}
}
} // method loop ends
} // PATH if block ends
// for next cycle
injectApplicationDirectory=false;
injectApplicationScope=false;
injectSessionScope=false;
injectRequestScope=false;
} // outer loop ends


}catch(ClassNotFoundException cnfe)
{
System.out.println("Problem");
}

servletContext.setAttribute("dataStructure",model);
System.out.println("HashMap Size is: "+model.dataStructure.size());

return startupList;
} // method ends
